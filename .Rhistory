str(imputed.activity.data)
library (RColorBrewer)
main.title <- "Comprison of Steps Taken WeekDay vs Weekend"    ###plot title
xlab.text = "Five Minute Interval"                                                        ###x axis label
ylab.text <- "Number of Steps"                                      ###y axis label
palette.variable <- "Reds"                                                ###color for bar plots
scales.variable <- "free"                                                 ###scales shared across facets vary by x and y axes
stat.variable <- "identity"                                               ###stat equal to identity means use exact y value in dataset
space.variable = "fixed"                                                  ###space equal to fixed means all panels have same size
###
gg.plot <- ggplot(data=imputed.activity.data, aes(x=factor(interval), y=steps, fill = weekend.factor)) +
geom_bar(stat=stat.variable, position=position_dodge()) +
facet_grid(.~weekend.factor, scales=scales.variable, space=space.variable) +
labs(x=xlab.text, y=ylab.text) +
guides(fill=FALSE)  +
ggtitle(main.title) +
scale_fill_brewer(palette=palette.variable)
library (RColorBrewer)
main.title <- "Comprison of Steps Taken WeekDay vs Weekend"    ###plot title
xlab.text = "Five Minute Interval"                                                        ###x axis label
ylab.text <- "Number of Steps"                                      ###y axis label
palette.variable <- "Reds"                                                ###color for bar plots
scales.variable <- "free"                                                 ###scales shared across facets vary by x and y axes
stat.variable <- "identity"                                               ###stat equal to identity means use exact y value in dataset
space.variable = "fixed"                                                  ###space equal to fixed means all panels have same size
###
gg.plot <- ggplot(data=imputed.activity.data, aes(x=factor(interval), y=steps, fill = weekend.factor)) +
geom_bar(stat=stat.variable, position=position_dodge()) +
facet_grid(.~weekend.factor, scales=scales.variable, space=space.variable) +
labs(x=xlab.text, y=ylab.text) +
guides(fill=FALSE)  +
ggtitle(main.title) +
scale_fill_brewer(palette=palette.variable)
library (ggplot2)
library (RColorBrewer)
main.title <- "Comprison of Steps Taken WeekDay vs Weekend"    ###plot title
xlab.text = "Five Minute Interval"                                                        ###x axis label
ylab.text <- "Number of Steps"                                      ###y axis label
palette.variable <- "Reds"                                                ###color for bar plots
scales.variable <- "free"                                                 ###scales shared across facets vary by x and y axes
stat.variable <- "identity"                                               ###stat equal to identity means use exact y value in dataset
space.variable = "fixed"                                                  ###space equal to fixed means all panels have same size
###
gg.plot <- ggplot(data=imputed.activity.data, aes(x=factor(interval), y=steps, fill = weekend.factor)) +
geom_bar(stat=stat.variable, position=position_dodge()) +
facet_grid(.~weekend.factor, scales=scales.variable, space=space.variable) +
labs(x=xlab.text, y=ylab.text) +
guides(fill=FALSE)  +
ggtitle(main.title) +
scale_fill_brewer(palette=palette.variable)
gg.plot
library (RColorBrewer)
main.title <- "Comprison of Steps Taken WeekDay vs Weekend"    ###plot title
xlab.text = "Five Minute Interval"                                                        ###x axis label
ylab.text <- "Number of Steps"                                      ###y axis label
palette.variable <- "Reds"                                                ###color for bar plots
scales.variable <- "free"                                                 ###scales shared across facets vary by x and y axes
stat.variable <- "identity"                                               ###stat equal to identity means use exact y value in dataset
space.variable = "fixed"                                                  ###space equal to fixed means all panels have same size
###
gg.plot <- ggplot(data=imputed.activity.data, aes(x=factor(interval), y=steps, fill = weekend.factor)) +
geom_line(stat=stat.variable, position=position_dodge()) +
facet_grid(.~weekend.factor, scales=scales.variable, space=space.variable) +
labs(x=xlab.text, y=ylab.text) +
guides(fill=FALSE)  +
ggtitle(main.title) +
scale_fill_brewer(palette=palette.variable)
library(lattice)
xyplot(steps ~ interval | weekend.factor,
data=imputed.activity.data,
type="l"
lty = c(1, 2, 2, 1),
lwd = c(1, 1, 1, 3),
col.line = c(rep("black",3), "red"))
xyplot(steps ~ interval | weekend.factor,
data=imputed.activity.data,
type = "l",
lty = c(1, 2, 2, 1),
lwd = c(1, 1, 1, 3),
col.line = c(rep("black",3), "red"))
xyplot(steps ~ interval | weekend.factor,
data=imputed.activity.data,
type = "l")
xyplot(mean(steps) ~ interval | weekend.factor,
data=imputed.activity.data,
type = "l")
average.steps.weekday <- aggregate(imputed.activity.data$steos, by=list(imputed.activity.data$interval,imputed.activity.data$weekend,factor), FUN=mean)
head(imputed.activity.data)
average.steps.weekday <- aggregate(imputed.activity.data$steps, by=list(imputed.activity.data$interval,imputed.activity.data$weekend,factor), FUN=mean)
average.steps.weekday <- aggregate(imputed.activity.data, by=list(imputed.activity.data$interval,imputed.activity.data$weekend,factor), FUN=mean)
libary(data.table)
table.imputed.activity.data <- data.table(imputed.activity.data)
table.imputed.activity.data <- table.imputed.activity.data[, avgsteps := mean(steps), by=list(interval, weekend.factor)]
library(data.table)
table.imputed.activity.data <- data.table(imputed.activity.data)
table.imputed.activity.data <- table.imputed.activity.data[, avgsteps := mean(steps), by=list(interval, weekend.factor)]
head(table.imputed.activity.data)
head(table.imputed.activity.data, 20
)
head(table.imputed.activity.data, 100)
head(table.imputed.activity.data, 300
)
xyplot(avgsteps ~ interval | weekend.factor,
data=imputed.activity.data,
type = "l")
new.imputed.activity.data <- as.data.frame(table.imputed.activity.data)
xyplot(avgsteps ~ interval | weekend.factor,
data=new.imputed.activity.data,
type = "l")
tail(imputed.activity.data, 50)
tail(imputed.activity.data, 700:800)
tail(imputed.activity.data, 500)
new.imputed.activity.data <- order(new.imputed.activity.data, interval, weekend.factor)
?order
?arrange
new.imputed.activity.data <- arrange(new.imputed.activity.data, interval, weekend.factor)
head(new.imputed.activity.data)
xyplot(avgsteps ~ interval | weekend.factor,
data=new.imputed.activity.data,
type = "l")
xyplot(avgsteps ~ interval | weekend.factor,
data=new.imputed.activity.data,
main="Comparison of Number of Average Steps During a Weekday vs a Weekend"
type = "l")
xyplot(avgsteps ~ interval | weekend.factor,
data=new.imputed.activity.data,
main="Comparison of Number of Average Steps During a Weekday vs a Weekend",
type = "l")
View(steps.by.day.all)
source('~/EDA_Project2_Q3.R', echo=TRUE)
ggplot(data=fips.baltimore,aes(x=factor(year),y=Emissions, fill=type)) +
geom_bar(stat=stat.variable) +
theme_grey() +
facet_grid(~type, scales = scales.variable, space = space.variable) +
labs(x=xlab.text,y=ylab.text, title=main.title) +
scale_fill_brewer(palette=palette.variable)
# Need to subset the data for Baltimore City, Maryland (fips == "24510")
subNEI <- NEI[NEI$fips=="24510",]
# Get the sum of emissions done by year
sumEmissionByYear <- with(subNEI, tapply(Emissions,year, sum, is.na=T))
# Preparing data frame to build the plot
df <- data.frame(year=names(sumEmissionByYear), sum.byyear = sumEmissionByYear)
# Open a png device of 480x480 with point size 10
png(filename = "./plot2.png", width = 480, height = 480,
units = "px", pointsize = 12)
# Make a bar plot using base plotting system
barplot(df$sum.byyear, names = df$year,
ylim = c(0,3500),
xlab = "Year",
ylab = "Total Emission (in tons)",
main = "For Baltimore City, Maryland")
# Close the png device
dev.off()
# Make a bar plot using base plotting system
barplot(df$sum.byyear, names = df$year,
ylim = c(0,3500),
xlab = "Year",
ylab = "Total Emission (in tons)",
main = "For Baltimore City, Maryland")
# Need to subset the data for Baltimore City, Maryland (fips == "24510")
subNEI <- NEI[NEI$fips=="24510",]
# Get the sum of emissions done by type and year
sumEmissionByYear <- aggregate(Emissions ~ type + year, data = subNEI, FUN = sum)
# Open a png device of 800x400 with point size 10
png(filename = "./plot3.png", width = 800, height = 400,
units = "px", pointsize = 12)
# Start making the plot by identifying x axis as year and y axis as Total Emissions
myplot <- ggplot(data = sumEmissionByYear,
aes(x=factor(year), y=Emissions, fill=year))
# Define the plot as a bar graph
myplot <- myplot + geom_bar(stat="identity")
# Make mutiple plots by type
myplot <-  myplot + facet_grid(. ~ type)
# Makes sure y axis is shown in human readable form
options(scipen=3)
# Add the labels for x and y axis
myplot <- myplot + labs(x="Year", y="Total Emission (in tons)",
title="For Baltimore City, Maryland")
# Store the plot into a png file
print(myplot)
# Close the png device
dev.off()
print(myplot)
subset_Baltimore_motor <- subset(NEI, fips=="24510" & type=="ON-ROAD")
## Aggregation:
total_emissions_per_year_Baltimore_motor <- aggregate(Emissions ~ year, subset_Baltimore_motor , sum)
## Plotting:
png('plot5.png')
g <- ggplot(total_emissions_per_year_Baltimore_motor, aes(year, Emissions))
g <- g + geom_line(stat="identity") + geom_point(aes(size=2, col=Emissions)) +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions from motor vehicle in Baltimore from 1999 to 2008')
g
print(g)
dev.off()
g
xyplot(avgsteps ~ interval | weekend.factor,
data=new.imputed.activity.data,
ylab = "AVerage Number of Steps"
main="Comparison of Number of Average Steps During a Weekday vs a Weekend",
type = "l")
xyplot(avgsteps ~ interval | weekend.factor,
data=new.imputed.activity.data,
ylab = "AVerage Number of Steps",
main="Comparison of Number of Average Steps During a Weekday vs a Weekend",
type = "l")
library(lattice)
xyplot(avgsteps ~ interval | weekend.factor,
data=new.imputed.activity.data,
ylab = "AVerage Number of Steps",
main="Comparison of Number of Average Steps During a Weekday vs a Weekend",
type = "l")
ibrary("dplyr")
fileUrl <- "c:/Users/John/Documents/activity.csv"
activity.data <- read.csv(fileUrl, sep=",", header = TRUE)              #17568 observations of 3 variables
activity.data.complete <- activity.data[complete.cases(activity.data),]  #15264 observations of 3 variables
activity.data.complete.na <- activity.data[!complete.cases(activity.data),] #2304 observations of 3 variables
steps.by.day <- aggregate(activity.data.complete$steps, by=list(activity.data.complete$date), FUN=sum) ## 53 obs of 2 variables
names(steps.by.day) <- c("date", "steps") #because date is Group.1 and steps is 'x' variable
sum(steps.by.day$steps)  #570608 which is total number of steps
hist(steps.by.day$steps,
ylim=c(0,20),
xlab="Number of Daily Steps Taken",
main="Histogram of Steps Taken Each Day",
col="blue",
breaks=10)
summary(steps.by.day$steps)
##Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
##n 41    8841   10760   10770   13290   21190
median(steps.by.day$steps) #10765
mean(steps.by.day$steps)   #10766.19
average.steps.per.interval <- aggregate(activity.data.complete$steps, by=list(activity.data.complete$interval), FUN=mean)
names(average.steps.per.interval) <- c("interval", "steps")
plot.ts(average.steps.per.interval$steps, type="l",
xlab= "Five Minute Intervals",
ylab = "Average Number of Steps",
main="Time Series Average Number of Steps Per Interval")
max.interval <- average.steps.per.interval[which(average.steps.per.interval$steps == max(average.steps.per.interval$steps)),]
##interval    steps
##104      835 206.1698 Or just after 1 o'clock perhaps mid day exercise, returning from lunch or heading to a late one
##http://www.r-bloggers.com/imputing-missing-data-with-r-mice-package/
##MCAR vs MNAR missing completely at random, missing not at random
### missing data = 2304/17568 or 13.1% missing. well above 5% threshold
library(mice)
tempData <- mice(activity.data,m=5,maxit=50,meth='pmm',seed=500)
summarize(tempData)
imputed.activity.data <- complete(tempData,1)
imputed.steps.by.day <- aggregate(imputed.activity.data$steps, by=list(imputed.activity.data$date), FUN=sum)
names(imputed.steps.by.day) <- c("date", "steps")
sum(imputed.steps.by.day$steps)
#  [1] 675486
hist(imputed.steps.by.day$steps,
ylim=c(0,20),
xlab="Imputed Number of Daily Steps Taken",
main="Histogram of Steps Taken Each Day Using MICE for Missing Values",
col="green",
breaks=10)
median(steps.by.day$steps) #11162
mean(steps.by.day$steps)   #11073.54
#Mice routine increased mean by 2.9% and median by 3.7%
##approximately 13.1% of the observations were missing values
#Overal distribution of missing values is unaffectedas as easily seen on a side by side comparison plot
par(mfrow=c(2,1))
hist(steps.by.day$steps,
+      ylim=c(0,20),
+      xlab="Number of Daily Steps Taken",
+      main="Histogram of Steps Taken Each Day",
+      col="blue",
+      breaks=10)
hist(imputed.steps.by.day$steps,
ylim=c(0,20),
xlab="Imputed Number of Daily Steps Taken",
main="Histogram of Steps Taken Each Day Using MICE for Missing Values",
col="green",
breaks=10)
imputed.activity.data <- mutate(imputed.activity.data, dow <- weekdays(imputed.activity.data$date))
names(imputed.activity.data)[4] <- "day.of.week"
weekend.factor <- ifelse(imputed.activity.data$day.of.week == "Saturday" | imputed.activity.data$day.of.week == "Sunday", "weekend", "weekday")
imputed.activity.data <- cbind(imputed.activity.data, weekend.factor)
library (RColorBrewer)
main.title <- "Comprison of Steps Taken WeekDay vs Weekend"    ###plot title
xlab.text = "Five Minute Interval"                                                        ###x axis label
ylab.text <- "Number of Steps"                                      ###y axis label
palette.variable <- "Reds"                                                ###color for bar plots
scales.variable <- "free"                                                 ###scales shared across facets vary by x and y axes
stat.variable <- "identity"                                               ###stat equal to identity means use exact y value in dataset
space.variable = "fixed"                                                  ###space equal to fixed means all panels have same size
###
gg.plot <- ggplot(data=imputed.activity.data, aes(x=factor(interval), y=steps, fill = weekend.factor)) +
geom_line(stat=stat.variable, position=position_dodge()) +
facet_grid(.~weekend.factor, scales=scales.variable, space=space.variable) +
labs(x=xlab.text, y=ylab.text) +
guides(fill=FALSE)  +
ggtitle(main.title) +
scale_fill_brewer(palette=palette.variable)
print(gg.plot)
dev.off()
library(lattice)
xyplot(avgsteps ~ interval | weekend.factor,
data=new.imputed.activity.data,
ylab = "AVerage Number of Steps",
main="Comparison of Number of Average Steps During a Weekday vs a Weekend",
type = "l")
library(data.table)
table.imputed.activity.data <- data.table(imputed.activity.data)
table.imputed.activity.data <- table.imputed.activity.data[, avgsteps := mean(steps), by=list(interval, weekend.factor)]
new.imputed.activity.data <- arrange(new.imputed.activity.data, interval, weekend.factor)
summarize(tempData)
summary(tempData)
imputed.activity.data <- complete(tempData,1)
imputed.steps.by.day <- aggregate(imputed.activity.data$steps, by=list(imputed.activity.data$date), FUN=sum)
names(imputed.steps.by.day) <- c("date", "steps")
sum(imputed.steps.by.day$steps)
#  [1] 675486
hist(imputed.steps.by.day$steps,
ylim=c(0,20),
xlab="Imputed Number of Daily Steps Taken",
main="Histogram of Steps Taken Each Day Using MICE for Missing Values",
col="green",
breaks=10)
median(steps.by.day$steps) #11162
mean(steps.by.day$steps)   #11073.54
median(imputed.steps.by.day$steps) #11162
mean(imputed.steps.by.day$steps)   #11073.54
par(mfrow=c(2,1))
hist(steps.by.day$steps,
ylim=c(0,20),
xlab="Number of Daily Steps Taken",
main="Histogram of Steps Taken Each Day",
col="blue",
breaks=10)
hist(imputed.steps.by.day$steps,
ylim=c(0,20),
xlab="Imputed Number of Daily Steps Taken",
main="Histogram of Steps Taken Each Day Using MICE for Missing Values",
col="green",
breaks=10)
imputed.activity.data <- mutate(imputed.activity.data, dow <- weekdays(imputed.activity.data$date))
names(imputed.activity.data)[4] <- "day.of.week"
weekend.factor <- ifelse(imputed.activity.data$day.of.week == "Saturday" | imputed.activity.data$day.of.week == "Sunday", "weekend", "weekday")
imputed.activity.data <- cbind(imputed.activity.data, weekend.factor)
dow <- weekdays(imputed.activity.data$date)
str(imputed.activity.data)
str(activity.data)
imputed.activity.data <- complete(tempData,1)
str(imputed.activity.data)
str(tempData)
str(imputed.activity.data)
str(activity.data)
imputed,activity,data$date <- as.factor(imputed.activity.data$date)
imputed,activity.data$date <- as.factor(imputed.activity.data$date)
imputed.activity.data$date <- as.factor(imputed.activity.data$date)
str(imputed.activity.date)
str(imputed.activity.data)
rm("imputed.activity.data")
imputed.activity.data <- complete(tempData,1)
str(imputed.activity.data)
class(imputed.activity.data$date)
imputed.steps.by.day <- aggregate(imputed.activity.data$steps, by=list(imputed.activity.data$date), FUN=sum)
str(imputed.activity.data)
names(imputed.steps.by.day) <- c("date", "steps")
sum(imputed.steps.by.day$steps)
#  [1] 675486
hist(imputed.steps.by.day$steps,
ylim=c(0,20),
xlab="Imputed Number of Daily Steps Taken",
main="Histogram of Steps Taken Each Day Using MICE for Missing Values",
col="green",
breaks=10)
median(imputed.steps.by.day$steps) #11162
mean(imputed.steps.by.day$steps)   #11073.54
#Mice routine increased mean by 2.9% and median by 3.7%
##approximately 13.1% of the observations were missing values
#Overal distribution of missing values is unaffectedas as easily seen on a side by side comparison plot
par(mfrow=c(2,1))
hist(steps.by.day$steps,
ylim=c(0,20),
xlab="Number of Daily Steps Taken",
main="Histogram of Steps Taken Each Day",
col="blue",
breaks=10)
hist(imputed.steps.by.day$steps,
ylim=c(0,20),
xlab="Imputed Number of Daily Steps Taken",
main="Histogram of Steps Taken Each Day Using MICE for Missing Values",
col="green",
breaks=10)
istr(imputed.activity.data)
str(imputed.activity.data)
imputed.activity.data <- mutate(imputed.activity.data, dow <- weekdays(imputed.activity.data$date))
dow <- weekdays(imputed.activity.data$date
)
weekdays(imputed.activity.data)[1]
?weekdays
imputed.activity.data <- mutate(imputed.activity.data, dow <- weekdays(date))
imputed.activity.data <- mutate(imputed.activity.data, dow <- weekdays(date, abbreviated = FALSE))
imputed.activity.data <- mutate(imputed.activity.data, dow <- weekdays(date, abbreviate = FALSE))
imputed.activity.data <- mutate(imputed.activity.data, dow <- weekdays(date, abbreviate = TRUE))
imputed.activity.data <- mutate(imputed.activity.data, dow <- weekdays(date))
rm(list=ls())
library("dplyr")
fileUrl <- "c:/Users/John/Documents/activity.csv"
activity.data <- read.csv(fileUrl, sep=",", header = TRUE)              #17568 observations of 3 variables
activity.data.complete <- activity.data[complete.cases(activity.data),]  #15264 observations of 3 variables
activity.data.complete.na <- activity.data[!complete.cases(activity.data),] #2304 observations of 3 variables
steps.by.day <- aggregate(activity.data.complete$steps, by=list(activity.data.complete$date), FUN=sum) ## 53 obs of 2 variables
names(steps.by.day) <- c("date", "steps") #because date is Group.1 and steps is 'x' variable
sum(steps.by.day$steps)  #570608 which is total number of steps
hist(steps.by.day$steps,
ylim=c(0,20),
xlab="Number of Daily Steps Taken",
main="Histogram of Steps Taken Each Day",
col="blue",
breaks=10)
summary(steps.by.day$steps)
##Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
##n 41    8841   10760   10770   13290   21190
median(steps.by.day$steps) #10765
mean(steps.by.day$steps)   #10766.19
average.steps.per.interval <- aggregate(activity.data.complete$steps, by=list(activity.data.complete$interval), FUN=mean)
names(average.steps.per.interval) <- c("interval", "steps")
plot.ts(average.steps.per.interval$steps, type="l",
xlab= "Five Minute Intervals",
ylab = "Average Number of Steps",
main="Time Series Average Number of Steps Per Interval")
max.interval <- average.steps.per.interval[which(average.steps.per.interval$steps == max(average.steps.per.interval$steps)),]
##interval    steps
##104      835 206.1698 Or just after 1 o'clock perhaps mid day exercise, returning from lunch or heading to a late one
##http://www.r-bloggers.com/imputing-missing-data-with-r-mice-package/
##MCAR vs MNAR missing completely at random, missing not at random
### missing data = 2304/17568 or 13.1% missing. well above 5% threshold
ibrary(mice)
tempData <- mice(activity.data,m=5,maxit=50,meth='pmm',seed=500)
summary(tempData)
imputed.activity.data <- complete(tempData,1)
imputed.steps.by.day <- aggregate(imputed.activity.data$steps, by=list(imputed.activity.data$date), FUN=sum)
names(imputed.steps.by.day) <- c("date", "steps")
sum(imputed.steps.by.day$steps)
#  [1] 675486
hist(imputed.steps.by.day$steps,
ylim=c(0,20),
xlab="Imputed Number of Daily Steps Taken",
main="Histogram of Steps Taken Each Day Using MICE for Missing Values",
col="green",
breaks=10)
median(imputed.steps.by.day$steps) #11162
mean(imputed.steps.by.day$steps)   #11073.54
#Mice routine increased mean by 2.9% and median by 3.7%
##approximately 13.1% of the observations were missing values
par(mfrow=c(2,1))
hist(steps.by.day$steps,
ylim=c(0,20),
xlab="Number of Daily Steps Taken",
main="Histogram of Steps Taken Each Day",
col="blue",
breaks=10)
hist(imputed.steps.by.day$steps,
ylim=c(0,20),
xlab="Imputed Number of Daily Steps Taken",
main="Histogram of Steps Taken Each Day Using MICE for Missing Values",
col="green",
breaks=10)
imputed.activity.data <- mutate(imputed.activity.data, dow <- weekdays(imputed.activity.data$date))
imputed.activity.data <- mutate(imputed.activity.data, dow <- weekdays(activity.data$date))
imputed.activity.data$date <- as.Date(imputed.activity.data$date, format="%Y-%m-%d")
imputed.activity.data <- mutate(imputed.activity.data, dow <- weekdays(imputed.activity.data$date))
names(imputed.activity.data)[4] <- "day.of.week"
weekend.factor <- ifelse(imputed.activity.data$day.of.week == "Saturday" | imputed.activity.data$day.of.week == "Sunday", "weekend", "weekday")
imputed.activity.data <- cbind(imputed.activity.data, weekend.factor)
library (RColorBrewer)
main.title <- "Comprison of Steps Taken WeekDay vs Weekend"    ###plot title
xlab.text = "Five Minute Interval"                                                        ###x axis label
ylab.text <- "Number of Steps"                                      ###y axis label
palette.variable <- "Reds"                                                ###color for bar plots
scales.variable <- "free"                                                 ###scales shared across facets vary by x and y axes
stat.variable <- "identity"                                               ###stat equal to identity means use exact y value in dataset
space.variable = "fixed"                                                  ###space equal to fixed means all panels have same size
###
par(mfrow=c(1,1))
gg.plot <- ggplot(data=imputed.activity.data, aes(x=factor(interval), y=steps, fill = weekend.factor)) +
geom_line(stat=stat.variable, position=position_dodge()) +
facet_grid(.~weekend.factor, scales=scales.variable, space=space.variable) +
labs(x=xlab.text, y=ylab.text) +
guides(fill=FALSE)  +
ggtitle(main.title) +
scale_fill_brewer(palette=palette.variable)
print(gg.plot)
dev.off()
library(lattice)
par(mfrow=c(1,1))
xyplot(avgsteps ~ interval | weekend.factor,
data=new.imputed.activity.data,
ylab = "AVerage Number of Steps",
main="Comparison of Number of Average Steps During a Weekday vs a Weekend",
type = "l")
new.imputed.activity.data <- arrange(new.imputed.activity.data, interval, weekend.factor)
table.imputed.activity.data <- data.table(imputed.activity.data)
table.imputed.activity.data <- table.imputed.activity.data[, avgsteps := mean(steps), by=list(interval, weekend.factor)]
new.imputed.activity.data <- as.data.frame(table.imputed.activity.data)
new.imputed.activity.data <- arrange(new.imputed.activity.data, interval, weekend.factor)
library(lattice)
par(mfrow=c(1,1))
xyplot(avgsteps ~ interval | weekend.factor,
data=new.imputed.activity.data,
ylab = "AVerage Number of Steps",
main="Comparison of Number of Average Steps During a Weekday vs a Weekend",
type = "l")
setwd("c:/Users/John/RepData_PeerAssessment1")
library("knitr")
knit2html("PA1_template.html")
knit2html("PA1_template.md")
